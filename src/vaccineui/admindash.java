/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vaccineui;
//

/**implementation 'com.itextpdf:itextpdf:5.5.13.2'
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;*/

//import java.io.FileOutputStream;
//import java.io.IOException;
//import java.text.SimpleDateFormat;
//import java.util.Date;
//
import javax.swing.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import vaccineui.Dashboard1;
import vaccineui.MYCONNECTION;
//import javax.swing.table.DefaultTableModel;

/**
 *
 * @author xiestudent
 */
public class admindash extends javax.swing.JFrame {
    private DefaultTableModel tableModel;
    private DefaultTableModel tableMode2;

    /**
     * Creates new form admindash
     */
    public admindash() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton10 = new javax.swing.JButton();
        jTextField3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        dataTable2 = new javax.swing.JTable();
        jLabel17 = new javax.swing.JLabel();
        jButton11 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        dataTable1 = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        Appointments = new javax.swing.JButton();
        Appointment = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setFont(new java.awt.Font("Verdana", 1, 48)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 51, 0));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("ADMIN");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 20, 370, 70));

        jButton2.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jButton2.setText("LOG OUT");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(805, 40, 130, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -10, 950, 120));

        jPanel3.setBackground(new java.awt.Color(204, 0, 0));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setBackground(new java.awt.Color(153, 204, 255));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel3.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(247, 22, -1, -1));

        jButton5.setBackground(new java.awt.Color(102, 0, 0));
        jButton5.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 18)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/information-system.png"))); // NOI18N
        jButton5.setText("MARK ATTENDANCE");
        jButton5.setIconTextGap(10);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, 229, 45));

        jButton6.setBackground(new java.awt.Color(102, 0, 0));
        jButton6.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 18)); // NOI18N
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check.png"))); // NOI18N
        jButton6.setText("ALL DATA");
        jButton6.setIconTextGap(10);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 230, 229, 45));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 230, 500));

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel7.setBackground(new java.awt.Color(102, 0, 0));
        jPanel7.setAutoscrolls(true);
        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 28)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/information-system.png"))); // NOI18N
        jLabel1.setText("MEMBERS STATUS");
        jLabel1.setIconTextGap(20);
        jPanel7.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 30, 320, 40));

        jButton9.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jButton9.setText("ENTER");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton9, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 90, 90, 30));

        jLabel14.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("ENTER USERNAME:");
        jPanel7.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 140, 30));

        jLabel15.setFont(new java.awt.Font("Sylfaen", 1, 18)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Profiles Appointments");
        jPanel7.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 250, 260, 30));

        jLabel16.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("NAME:");
        jPanel7.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 50, 30));

        jLabel18.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 18)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("AGE");
        jPanel7.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, 70, 30));

        jTextField1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jPanel7.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 90, 270, 30));

        jButton10.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jButton10.setText("MARK ATTENDANCE");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton10, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 450, -1, 30));

        jTextField3.setBackground(new java.awt.Color(102, 0, 0));
        jTextField3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jTextField3.setForeground(new java.awt.Color(255, 255, 255));
        jPanel7.add(jTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 210, 180, 30));

        jTextField2.setBackground(new java.awt.Color(102, 0, 1));
        jTextField2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jTextField2.setForeground(new java.awt.Color(255, 255, 255));
        jPanel7.add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 170, 180, 30));

        dataTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(dataTable2);

        jPanel7.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 280, 660, 160));

        jLabel17.setFont(new java.awt.Font("Sylfaen", 1, 24)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("INFORMATION");
        jPanel7.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 140, 220, 30));

        jButton11.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jButton11.setText("DELETE");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton11, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 450, 150, 30));

        jPanel2.add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -20, 730, 520));

        dataTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(dataTable1);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 700, 290));

        jTabbedPane1.addTab("tab1", jPanel2);

        jPanel5.setBackground(new java.awt.Color(102, 0, 0));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 28)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/information-system.png"))); // NOI18N
        jLabel2.setText("ALL DATA");
        jLabel2.setIconTextGap(20);
        jPanel5.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 10, 165, -1));

        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(dataTable);

        jPanel5.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 700, 290));

        Appointments.setBackground(new java.awt.Color(255, 0, 0));
        Appointments.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Appointments.setForeground(new java.awt.Color(255, 255, 255));
        Appointments.setText("Appointment");
        Appointments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AppointmentsActionPerformed(evt);
            }
        });
        jPanel5.add(Appointments, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 100, -1, -1));

        Appointment.setBackground(new java.awt.Color(255, 0, 0));
        Appointment.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Appointment.setForeground(new java.awt.Color(255, 255, 255));
        Appointment.setText("Vaccines");
        Appointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AppointmentActionPerformed(evt);
            }
        });
        jPanel5.add(Appointment, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 100, -1, -1));

        jButton4.setBackground(new java.awt.Color(255, 0, 0));
        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Attendance");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 100, -1, -1));

        jButton12.setBackground(new java.awt.Color(255, 51, 51));
        jButton12.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton12.setForeground(new java.awt.Color(255, 255, 255));
        jButton12.setText("UserData");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton12, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 100, -1, -1));

        jButton13.setBackground(new java.awt.Color(255, 51, 51));
        jButton13.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton13.setForeground(new java.awt.Color(255, 255, 255));
        jButton13.setText("ADD ADMIN");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton13, new org.netbeans.lib.awtextra.AbsoluteConstraints(126, 430, 130, -1));

        jButton14.setBackground(new java.awt.Color(255, 51, 51));
        jButton14.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton14.setForeground(new java.awt.Color(255, 255, 255));
        jButton14.setText("ADD VACCINES");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton14, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 430, -1, -1));

        jTabbedPane1.addTab("tab2", jPanel5);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 70, 720, 530));

        setSize(new java.awt.Dimension(966, 608));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(0);
    }//GEN-LAST:event_jButton5ActionPerformed
public static void deleterecord(String username) {
   // String user=username;
    PreparedStatement ps;
                
String query = "DELETE FROM `vaccinerecords` WHERE username= ?";
try {
    ps = MYCONNECTION.getConnection().prepareStatement(query);
    ps.setString(1, username);

} catch (SQLException ex) {
    JOptionPane.showMessageDialog(null, "Database Error: " + ex.getMessage());
    Logger.getLogger(signup1.class.getName()).log(Level.SEVERE, null, ex);
}
}
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(1);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        DefaultTableModel model = (DefaultTableModel) dataTable.getModel();
        if(model.getRowCount()>0){
            model.setRowCount(0);
        }
        tableModel = new DefaultTableModel();
        tableModel.setColumnCount(0);
        tableModel.addColumn("id");
        tableModel.addColumn("name");
        tableModel.addColumn("email");
        tableModel.addColumn("mobileno");
        
        tableModel.addColumn("aadhaarno");
        tableModel.addColumn("age");

        // Add more columns as needed

        dataTable.setModel(tableModel);
        // Clear the previous data
        tableModel.setRowCount(0);

        String query = "SELECT `id`, `name`, `email`, `mobileno`, `aadhaarno`, `age` FROM `signup`"; // Replace with your actual SQL query
        try (Connection conn = MYCONNECTION.getConnection(); // Your method to get DB connection
            PreparedStatement ps = conn.prepareStatement(query);
            ResultSet rs = ps.executeQuery()) {

            int columnCount = rs.getMetaData().getColumnCount(); // Get column count

            while (rs.next()) {
                Object[] row = new Object[columnCount]; // Create row based on column count
                for (int i = 0; i < columnCount; i++) {
                    row[i] = rs.getObject(i + 1); // Access each column
                }
                tableModel.addRow(row); // Add the new row to the table model
            }
            dataTable.setRowHeight(30);
            int rowHeight = dataTable.getRowHeight();
            int totalHeight = rowHeight * dataTable.getRowCount();
            dataTable.setPreferredScrollableViewportSize(new java.awt.Dimension(400, totalHeight));
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Database Error: " + ex.getMessage());
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        DefaultTableModel model = (DefaultTableModel) dataTable.getModel();
        if(model.getRowCount()>0){
            model.setRowCount(0);
        }
        tableModel = new DefaultTableModel();
        tableModel.setColumnCount(0);
        tableModel.addColumn("Username");
        tableModel.addColumn("MemberName");
        tableModel.addColumn("Vaccine Name");
        tableModel.addColumn("status");

        // Add more columns as needed

        dataTable.setModel(tableModel);
        // Clear the previous data
        tableModel.setRowCount(0);

        String query = "SELECT `username`, `member_name`, `vaccine_name`,`status` FROM `attendance`"; // Replace with your actual SQL query
        try (Connection conn = MYCONNECTION.getConnection(); // Your method to get DB connection
            PreparedStatement ps = conn.prepareStatement(query);
            ResultSet rs = ps.executeQuery()) {

            int columnCount = rs.getMetaData().getColumnCount(); // Get column count

            while (rs.next()) {
                Object[] row = new Object[columnCount]; // Create row based on column count
                for (int i = 0; i < columnCount; i++) {
                    row[i] = rs.getObject(i + 1); // Access each column
                }
                tableModel.addRow(row); // Add the new row to the table model
            }
            dataTable.setRowHeight(30);
            int rowHeight = dataTable.getRowHeight();
            int totalHeight = rowHeight * dataTable.getRowCount();
            dataTable.setPreferredScrollableViewportSize(new java.awt.Dimension(400, totalHeight));
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Database Error: " + ex.getMessage());
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void AppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AppointmentActionPerformed

        DefaultTableModel model = (DefaultTableModel) dataTable.getModel();
        if(model.getRowCount()>0){
            model.setRowCount(0);
        }
        tableModel = new DefaultTableModel();
        tableModel.setColumnCount(0);
        tableModel.addColumn("Id");
        tableModel.addColumn("Vaccine name");
        tableModel.addColumn("Quantity");

        // Add more columns as needed

        dataTable.setModel(tableModel);
        // Clear the previous data
        tableModel.setRowCount(0);

        String query = "SELECT * FROM `vaccines`"; // Replace with your actual SQL query
        try (Connection conn = MYCONNECTION.getConnection(); // Your method to get DB connection
            PreparedStatement ps = conn.prepareStatement(query);
            ResultSet rs = ps.executeQuery()) {

            int columnCount = rs.getMetaData().getColumnCount(); // Get column count

            while (rs.next()) {
                Object[] row = new Object[columnCount]; // Create row based on column count
                for (int i = 0; i < columnCount; i++) {
                    row[i] = rs.getObject(i + 1); // Access each column
                }
                tableModel.addRow(row); // Add the new row to the table model
            }
            dataTable.setRowHeight(30);
            int rowHeight = dataTable.getRowHeight();
            int totalHeight = rowHeight * dataTable.getRowCount();
            dataTable.setPreferredScrollableViewportSize(new java.awt.Dimension(400, totalHeight));
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Database Error: " + ex.getMessage());
        }            // TODO add your handling code here:
    }//GEN-LAST:event_AppointmentActionPerformed

    private void AppointmentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AppointmentsActionPerformed
        retrieveData();        // TODO add your handling code here:
    }//GEN-LAST:event_AppointmentsActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
       int selectedRow = dataTable2.getSelectedRow(); // Get the selected row index

if (selectedRow != -1) { // Check if a row is selected
    // Get the value of a specific column from the selected row
    String memberName = dataTable2.getValueAt(selectedRow, 0).toString(); // Assuming member_name is in the first column
 String vaccineName = dataTable2.getValueAt(selectedRow, 1).toString(); // Assuming vaccine_name is in the second column
    updatedata(memberName,vaccineName);
    
   
} else {
            JOptionPane.showMessageDialog(this, "Select member name to mark attendace");
}
    }//GEN-LAST:event_jButton10ActionPerformed
public void updatedata(String membername,String vaccineName){
    PreparedStatement ps;
    String username=jTextField1.getText();
String query = "INSERT INTO `attendance`(`username`,`status`,`member_name`,`vaccine_name`) VALUES(?,?,?,?)";
 
try {
    ps = MYCONNECTION.getConnection().prepareStatement(query);

    ps.setString(1, username);
    ps.setString(2, "DONE");
    ps.setString(3, membername);
    ps.setString(4, vaccineName);
   
    if(ps.executeUpdate() > 0) {
        JOptionPane.showMessageDialog(null, "Status Updated");
        deleterec(membername);
        delvaccine(vaccineName);
       }

} catch (SQLException ex) {
    JOptionPane.showMessageDialog(null, "Database Error: " + ex.getMessage());
    Logger.getLogger(signup1.class.getName()).log(Level.SEVERE, null, ex);
}     
}
public void delvaccine(String vaccineName){
    String query = "UPDATE vaccines SET quantity = quantity - 1 WHERE vaccine_name = ?";

        try
             (PreparedStatement ps = MYCONNECTION.getConnection().prepareStatement(query)) {
             
            // Set the parameter for the prepared statement
            ps.setString(1, vaccineName);
            
            // Execute the delete operation
             if(ps.executeUpdate() > 0) {
      
       }
        } catch (SQLException ex) {
            Logger.getLogger(login.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Database Error: " + ex.getMessage());
        }
}
public void deleterec(String membername){
    String query = "DELETE FROM vaccinerecords WHERE m_name =?";

        try
             (PreparedStatement ps = MYCONNECTION.getConnection().prepareStatement(query)) {
             
            // Set the parameter for the prepared statement
            ps.setString(1, membername);
            
            // Execute the delete operation
             if(ps.executeUpdate() > 0) {
       Showdata(jTextField1.getText());
       }
        } catch (SQLException ex) {
            Logger.getLogger(login.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Database Error: " + ex.getMessage());
        }
    
}
    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed
    public static boolean appointmentfound(String user){
        String username = user;
        if(username==null){
             JOptionPane.showMessageDialog(null, "Enter Username.");
        return false;
        }
        String flag=null;
            String query = "SELECT username FROM vaccinerecords WHERE username = ?";
            StringBuilder vaccines = new StringBuilder();

            try (PreparedStatement ps = MYCONNECTION.getConnection().prepareStatement(query)) {
                ps.setString(1, username);
                ResultSet rs = ps.executeQuery();

                while (rs.next()) {
                    vaccines.append(rs.getString("username")).append("\n");
                }

                if (vaccines.length() == 0) {
                    
                    return false;

                } else {
                    return true;
                    
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Database Error: " + ex.getMessage());
                //Logger.getLogger(VaccineNameFetcher.class.getName()).log(Level.SEVERE, null, ex);
            }
            return true;
    }
    public  void Showdata(String user){
        DefaultTableModel model = (DefaultTableModel) dataTable2.getModel();
        if(model.getRowCount()>0){
            model.setRowCount(0);
        }
        tableMode2 = new DefaultTableModel();
        tableMode2.setColumnCount(0);
        tableMode2.addColumn("Name");
        tableMode2.addColumn("Vaccine name");
        tableMode2.addColumn("Appointment Date");

        // Add more columns as needed

        dataTable2.setModel(tableMode2);
        // Clear the previous data
        tableMode2.setRowCount(0);

        String query = "SELECT  `m_name`, `vaccine_name`, `appointment_date`, `username` FROM `vaccinerecords` WHERE `username` =?;";
        try (Connection conn = MYCONNECTION.getConnection(); // Your method to get DB connection
            PreparedStatement ps = conn.prepareStatement(query);
                ){
           ps.setString(1, user);
            ResultSet rs = ps.executeQuery();
            int columnCount = rs.getMetaData().getColumnCount(); // Get column count

            while (rs.next()) {
                Object[] row = new Object[columnCount]; // Create row based on column count
                for (int i = 0; i < columnCount; i++) {
                    row[i] = rs.getObject(i + 1); // Access each column
                }
                tableMode2.addRow(row); // Add the new row to the table model
            }
            dataTable2.setRowHeight(30);
            int rowHeight = dataTable2.getRowHeight();
            int totalHeight = rowHeight * dataTable2.getRowCount();
            dataTable2.setPreferredScrollableViewportSize(new java.awt.Dimension(400, totalHeight));
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Database Error: " + ex.getMessage());
        }
    
    }
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed

        // PreparedStatement ps ;
         // Declare rs here

        String username = jTextField1.getText();
        setData(username);
        
    }//GEN-LAST:event_jButton9ActionPerformed
    public void setData(String username){
        

        String query = "SELECT name, age FROM signup WHERE username = ?;";

        try (Connection conn = MYCONNECTION.getConnection();
            PreparedStatement ps = conn.prepareStatement(query)) { // Renamed ps to ps1
            ResultSet rs = null;
            ps.setString(1, username);
           
            rs = ps.executeQuery(); // Use the already declared rs

            if (rs.next()) {
                String name = rs.getString("name");
                String Age = rs.getString("age");
                
                jTextField2.setText(name);
                jTextField3.setText(Age);
                
            } else {
                JOptionPane.showMessageDialog(null, "Username not found ");
            }
        } catch (SQLException ex) {
            Logger.getLogger(login.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Database Error: " + ex.getMessage());
        } 
        if(appointmentfound(username)){
        Showdata(username);
        // TODO add your handling code here:
        }else{
            tableMode2.setColumnCount(0);
        }
    }
    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
     int selectedRow = dataTable2.getSelectedRow(); // Get the selected row index

if (selectedRow != -1) { // Check if a row is selected
    // Get the value of a specific column from the selected row
    String memberName = dataTable2.getValueAt(selectedRow, 0).toString(); // Assuming member_name is in the first column
 //String vaccineName = dataTable2.getValueAt(selectedRow, 1).toString(); // Assuming vaccine_name is in the second column
    deleterec(memberName);
    Showdata(jTextField1.getText());
   
} else {
            JOptionPane.showMessageDialog(this, "Select member name to Delete record");
}                                // TODO add your handling code here:
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
            homepage1 b = new homepage1();
        b.show();
        dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
     newAdmin a =new newAdmin();
        a.setLocationRelativeTo(null);
        a.show();            // TODO add your handling code here:
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
             newAdmin1 a =new newAdmin1();
        a.setLocationRelativeTo(null);
        a.show();            // TODO add your handling code here:
    }//GEN-LAST:event_jButton14ActionPerformed
private void retrieveData() {
        DefaultTableModel model = (DefaultTableModel) dataTable.getModel();
         if(model.getRowCount()>0){
        model.setRowCount(0);  
         }
        tableModel = new DefaultTableModel();
        
        // Set up the JTable model
        tableModel.addColumn("Id"); 
        tableModel.addColumn("Member Name"); 
        tableModel.addColumn("Vaccine name");
        tableModel.addColumn("Appointment date");
        tableModel.addColumn("Username");

        // Add more columns as needed

        dataTable.setModel(tableModel);
        // Clear the previous data
        tableModel.setRowCount(0);
        
        String query = "SELECT `apoointment_id`, `m_name`, `vaccine_name`, `appointment_date`, `username` FROM `vaccinerecords`"; // Replace with your actual SQL query
        try (Connection conn = MYCONNECTION.getConnection(); // Your method to get DB connection
             PreparedStatement ps = conn.prepareStatement(query);
             ResultSet rs = ps.executeQuery()) {
            
            int columnCount = rs.getMetaData().getColumnCount(); // Get column count

        while (rs.next()) {
            Object[] row = new Object[columnCount]; // Create row based on column count
            for (int i = 0; i < columnCount; i++) {
                row[i] = rs.getObject(i + 1); // Access each column
            }
            tableModel.addRow(row); // Add the new row to the table model
        }
    } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Database Error: " + ex.getMessage());
        }
        dataTable.setRowHeight(30);
        int rowHeight = dataTable.getRowHeight();
        int totalHeight = rowHeight * dataTable.getRowCount();
        dataTable.setPreferredScrollableViewportSize(new java.awt.Dimension(400, totalHeight));
    }/**private void generateCertificate(String name, String username, String vaccineName) {
    Document document = new Document();
    try {
        PdfWriter.getInstance(document, new FileOutputStream(username + "_certificate.pdf"));
        document.open();

        Font titleFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 18, Font.BOLD);
        Font contentFont = FontFactory.getFont(FontFactory.HELVETICA, 12, Font.NORMAL);

        Paragraph title = new Paragraph("Vaccination Certificate", titleFont);
        title.setAlignment(Element.ALIGN_CENTER);
        document.add(title);

        document.add(new Paragraph("\n"));

        document.add(new Paragraph("This is to certify that:", contentFont));
        document.add(new Paragraph("Name: " + name, contentFont));
        document.add(new Paragraph("Username: " + username, contentFont));
        document.add(new Paragraph("Has received the following vaccine:", contentFont));
        document.add(new Paragraph("Vaccine: " + vaccineName, contentFont));

        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
        String dateString = formatter.format(new Date());
        document.add(new Paragraph("Date of Vaccination: " + dateString, contentFont));

        document.add(new Paragraph("\n\n"));
        document.add(new Paragraph("This certificate is computer-generated and does not require a signature.", contentFont));

    } catch (DocumentException | IOException e) {
        e.printStackTrace();
    } finally {
        document.close();
    }}*/

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(admindash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(admindash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(admindash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(admindash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new admindash().setVisible(true);
}
        });
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Appointment;
    private javax.swing.JButton Appointments;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JTable dataTable;
    private javax.swing.JTable dataTable1;
    private javax.swing.JTable dataTable2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel jTextField2;
    private javax.swing.JLabel jTextField3;
    // End of variables declaration//GEN-END:variables
}
